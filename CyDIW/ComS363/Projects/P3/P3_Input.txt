/*======================================================================
Item 1. List Names of students and their mentors.
*/

<showtext>
$Saxon:>
<NS>

{


let $dataStudent := doc("ComS363/Projects/Datasets/Student.xml")
let $dataPerson := doc("ComS363/Projects/Datasets/Person.xml")


for $s in $dataStudent/Students/Student
let $ps := $dataPerson/Persons/Person[ID=$s/StudentID]
let $pm := $dataPerson/Persons/Person[ID=$s/MentorID]
order by $ps/Name
return <E>
       <student_Name>{data($ps/Name)}</student_Name>
       <mentor_Name>{data($pm/Name)}</mentor_Name>
       </E>
}
</NS>;
</showtext>


/*======================================================================
 Item 2. For each classification, list the classification and the
 average GPA of students with that classification. Your query should
 not use any constants, such as "Freshman".  
*/

<showtext>
$Saxon:>

<NS>

{
let $dataStudent := doc("ComS363/Projects/Datasets/Student.xml")
let $dataPerson := doc("ComS363/Projects/Datasets/Person.xml")

for $c in distinct-values($dataStudent/Students/Student/Classification)
let $count := count($dataStudent/Students/Student[Classification=$c])
let $gpaSum := sum($dataStudent/Students/Student[Classification=$c]/GPA)

return <E>
       <Classification>{data($c)}</Classification>
       <AverageGPA>{$gpaSum div $count}</AverageGPA>
       </E>
}
</NS>;
</showtext>


/*======================================================================
Item 3. For each enrolled student, list his/her name and his/her
mentor's name.
*/

<showtext>
$Saxon:>
<NS>

{
let $dataStudent := doc("ComS363/Projects/Datasets/Student.xml")
let $dataPerson := doc("ComS363/Projects/Datasets/Person.xml")
let $dataEnrollment := doc("ComS363/Projects/Datasets/Enrollment.xml")


for $e in distinct-values($dataEnrollment/Enrollments/Enrollment/StudentID)

let $s := $dataStudent/Students/Student[StudentID=$e]
let $ps := $dataPerson/Persons/Person[ID=$e]
let $pm := $dataPerson/Persons/Person[ID=$s/MentorID]
order by $ps/Name
return <E>
       <student_Name>{data($ps/Name)}</student_Name>
       <mentor_Name>{data($pm/Name)}</mentor_Name>
       </E>

}
</NS>;
</showtext>

/*======================================================================
Item 4. List the Names of students who have at least one A in courses
they are enrolled in. (Do not consider A- as an A.)
*/
<showtext>
$Saxon:>
<NS>
{
let $dataStudent := doc("ComS363/Projects/Datasets/Student.xml")
let $dataPerson := doc("ComS363/Projects/Datasets/Person.xml")
let $dataEnrollment := doc("ComS363/Projects/Datasets/Enrollment.xml")

for $e in distinct-values( $dataEnrollment/Enrollments/Enrollment[Grade="A"]/StudentID)
for $sid in $e
let $sName := data($dataPerson/Persons/Person[ID=$sid]/Name)

order by $sName
return <E>{$sName} </E>

}
</NS>;
</showtext>



/*======================================================================
Item 5. List the course codes of courses that are prerequisites for the course 'CS311'.
*/
<showtext>
$Saxon:>
<NS>
{
let $dataCourse := doc("ComS363/Projects/Datasets/Course.xml")

for $preReq in $dataCourse//Course[CourseCode="CS311"]/PreReq
return <E>{data($preReq)}</E>

}
</NS>;
</showtext>




/*======================================================================
Item 6. Restructure Course.xml Student.xml by classification. There
should be one element per classification in which the remaining
information about students should be included in one element per
student.
*/
<showtext>
$Saxon:>
<Students>
{
let $dataStudent := doc("ComS363/Projects/Datasets/Student.xml")
let $classifications := distinct-values($dataStudent/Students/Student/Classification)
for $c in $classifications
return <Classification type="{$c}">
	{
	   for $s in $dataStudent/Students/Student[Classification=$c]
	   return <Student>
	   	  {$s/StudentID}
	   	  {$s/GPA}
	   	  {$s/MentorID}
	   	  {$s/CreditHours}
	   	   </Student>
 	}
	</Classification>

}
</Students>;
</showtext>




/*======================================================================
Item 7.  List the Name, and Rank of faculty who have a salary of 100K
or higher.
*/

<showtext>
$OOXQuery:>
<NS>
{
	for $e in doc("ComS363/Projects/Datasets/UniversityOODB(ODMG).xml")//Faculty
	where $e.Salary >= 100000
	return <E>
		<Name>{data($e.Name)}</Name>
		<Rank>{data($e.Rank)}</Rank>
	           </E>
}
</NS>;
</showtext>









/*======================================================================
Item 8. List Names of students and their mentors. (Note that if $s is
a student, $s.Mentor will return a faculty element)
*/
<showtext>
$OOXQuery:>
<NS>
{
	for $e in doc("ComS363/Projects/Datasets/UniversityOODB(ODMG).xml")//Student
	return <E>
		<Name>{data($e.Name)}</Name>
		<Mentor>{data($e.Mentor.Name)}</Mentor>
	           </E>
}
</NS>;
</showtext>









/*======================================================================
Item 9. For each faculty, list his / her name, and classification and
GPA of students that the faculty is mentoring. For each faculty there
should be only one element, the info about students should be nested
inside that element.  (Note that if $f is a faculty, $f.Mentoring will
return a list of students. You can iterate over this list using the
for clause.)
*/
<showtext>
$OOXQuery:>
<NS>
{
	for $e in doc("ComS363/Projects/Datasets/UniversityOODB(ODMG).xml")//Faculty 
	return <E>
		<Name>{data($e.Name)}</Name>
 		<Mentoring>
		{
			for $s in $e.Mentoring
			return 
			<Student>
				<Classification>{data($s.Classification)}</Classification>
				<GPA>{data($s.GPA)}</GPA>
			</Student>
		}
 		</Mentoring>
               </E>
}
</NS>;
</showtext>















/*======================================================================
Item 10. For every offering, list course name, section, instructors'
name and enrollment.
*/
<showtext>
$OOXQuery:>
<NS>
{
	for $e in doc("ComS363/Projects/Datasets/UniversityOODB(ODMG).xml")//Offering 
	return <E> 
	       	   	<CourseName>{data($e.CourseInfo.CourseName)} </CourseName>
			<CourseSection>{data($e.Section)}</CourseSection>
			<Instructor>{data($e.Instructor.Name)}</Instructor>
			<Enrollments>
			{
 			for $f in $e.Enrollments
			return $f
			}
 			</Enrollments>
 	       </E>
}
</NS>;
</showtext>


